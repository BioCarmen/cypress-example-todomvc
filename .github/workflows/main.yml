name: Main
on:
  push:
    branches:
      - "develop"
      - "hotfix/*"

jobs:
  test:
    name: run test
    runs-on: ubuntu-20.04
    steps:
      - run: echo "yeah"
  check:
    name: Check if job should run
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - uses: actions/checkout@v2

      # - run: git fetch --prune --unshallow
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJSON(github) }}
      #   run: echo "$GITHUB_CONTEXT"

      - name: Commit report
        id: get-tag
        run: |
          git fetch --prune --tags
          t=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=latest_tag::$t"
      - name: echo
        run: |
          echo ${{ steps.get-tag.outputs.latest_tag }}
      - name: Create tag
        uses: actions/github-script@v6
        id: set-release
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `refs/tags/${{steps.get-tag.outputs.latest_tag}}`,
              generate_release_notes: true
            })
            const releaseNotes = release.data.body
            const arrays = releaseNotes.split(/\r?\n/).filter((item) => item)
            .map((note) => {
            if (note.includes("https://github" && "pull")) {
              const link = note
                .split(" ")
                .filter((item) => item.startsWith("https://github"))[0];
              const pr = link.split("/").pop();
              return `â€¢ ${note
                .replace("* ", "")
                .replace(link, `<${link}|#${pr}>`)}`;
            } else {
              return `${note.replace("## ", "*")}*`;
            }
            });
            console.log(arrays)
            return arrays.join('\n')
          # script: |
          # const script = require('./release.js')

          # await script({github, context, core, tag: `${{steps.latest-tag.outputs.latest_tag}}` })

          result-encoding: string
      - name: send failed slack
        uses: slackapi/slack-github-action@v1.17.0
        with:
          channel-id: "test-updates-user-end-trial"
          slack-message: "*New release to production is successful*\n${{ steps.set-release.outputs.result}}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
