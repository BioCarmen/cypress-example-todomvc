name: Main
on:
  workflow_dispatch:
    branches:
      - "develop"
      - "hotfix/*"
  push:

jobs:
  get-latest-tag:
    name: run test
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get-tag.outputs.latest_tag }}
      rev_list_count: ${{steps.get-tag.outputs.rev_list_count }}
    steps:
      - uses: actions/checkout@v2
      - name: Commit report
        id: get-tag
        run: |
          git fetch --prune --tags
          t=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "::set-output name=latest_tag::$t"
          g=$(git rev-list --count $t..origin/develop)
          echo "::set-output name=rev_list_count::$g"
      - name: Release is up to date with develop
        if: ${{steps.get-tag.outputs.rev_list_count == 0 }}
        uses: slackapi/slack-github-action@v1.17.0
        with:
          channel-id: "test-updates-user-end-trial"
          slack-message: "Release is up to date with develop"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  check:
    name: Check if job should run
    runs-on: ubuntu-20.04
    if: ${{needs.get-latest-tag.outputs.rev_list_count != 0 }}
    needs: [get-latest-tag]
    steps:
      - uses: actions/checkout@v2

      # - run: git fetch --prune --unshallow
      - name: Dump GitHub context

        run: echo ${{ needs.get-latest-tag.outputs.rev_list_count}} ${{needs.get-latest-tag.outputs}}

      # - name: Commit report
      #   id: get-tag
      #   run: |
      #     git fetch --prune --tags
      #     t=$(git describe --tags `git rev-list --tags --max-count=1`)
      #     echo "::set-output name=latest_tag::$t"
      - name: echo
        run: |
          echo ${{ steps.get-tag.outputs.latest_tag }}
      - name: Get workflow trigger's name
        id: get-actor
        run: |
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo "::set-output name=actor::${{ github.actor }}"
          else
            echo "::set-output name=actor::github-actions[bot]"
          fi
      - name: Create tag
        uses: actions/github-script@v6
        id: set-release
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          # script: |
          # const release = await github.rest.repos.createRelease({
          #   owner: context.repo.owner,
          #   repo: context.repo.repo,
          #   tag_name: `refs/tags/${{steps.get-tag.outputs.latest_tag}}`,
          #   generate_release_notes: true
          # })
          # const releaseNotes = release.data.body
          # const arrays = releaseNotes.split(/\r?\n/).filter((item) => item)
          # .map((note) => {
          # if (note.includes("https://github" && "pull")) {
          #   const link = note
          #     .split(" ")
          #     .filter((item) => item.startsWith("https://github"))[0];
          #   const pr = link.split("/").pop();
          #   return `â€¢ ${note
          #     .replace("* ", "")
          #     .replace(link, `<${link}|#${pr}>`)}`;
          # } else {
          #   return `${note.replace("## ", "*")}*`;
          # }
          # });
          # console.log(arrays)
          # return arrays.join('\n')
          script: |
            const script = require('./release.js')

            await script({github, context, core, tag: `${{steps.latest-tag.outputs.latest_tag}}` })

          result-encoding: string
      - name: Push to Heroku
        run: git push -f https://heroku:${{ secrets.HEROKU_API_TOKEN }}@git.heroku.com/carmen-staging.git origin/release:main
      - name: send failed slack
        uses: slackapi/slack-github-action@v1.17.0
        with:
          channel-id: "test-updates-user-end-trial"
          slack-message: "*New release to production is successful* by ${{steps.get-actor.outputs.actor}}\n${{ steps.set-release.outputs.result}}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
